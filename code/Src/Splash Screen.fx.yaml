"'Splash Screen' As screen":
    Fill: =RGBA(53,89,137, 1)
    ImagePosition: =ImagePosition.Center
    OnVisible: |
        =//UpdateContext will update a variable on this screen, contextLoading status is the text at the bottom
        UpdateContext({contextLoadingStatus: "Processing Records..."});
        If(
            LookUp(
                Users_1,
                email = User().Email,
                userRole
            ) = "admin",
            Set(
                is_admin,
                true
            ),
            Set(
                is_admin,
                false
            )
        );
        Set(
            userData,
            {
                firstName: LookUp(
                    Users_1,
                    email = User().Email,
                    firstName
                ),
                lastName: LookUp(
                    Users_1,
                    email = User().Email,
                    lastName
                ),
                email: User().Email,
                role: LookUp(
                    Users_1,
                    email = User().Email,
                    userRole
                ),
                id: LookUp(
                    Users_1,
                    email = User().Email,
                    ID
                )
            }
        );
        //Enable for non timer based navigation for Splash Screen
        //Set(splashNavigate,true)
        ClearCollect(
            colStatus,
            {Result: "open"},
            {Result: "closed"}
        );
        //split admin tech later
        ClearCollect(
            navCol,
            {
                ID: 2,
                NavName: "Create Ticket",
                NavIcon: Icon.AddDocument,
                ScreenToGoTo: 'Category Select',
                AdminTech: true,
                Staff: true
            },
            {
                ID: 3,
                NavName: "My Tickets",
                NavIcon: Icon.Folder,
                ScreenToGoTo: MyTickets,
                AdminTech: true,
                Staff: true
            },
            {
                ID: 5,
                NavName: "Manager",
                NavIcon: Icon.ComputerDesktop,
                ScreenToGoTo: 'Admin Manager',
                AdminTech: true,
                Staff: false
            },
            {
                ID: 6,
                NavName: "Knowledge",
                NavIcon: Icon.QuestionMark,
                ScreenToGoTo: 'Knowledge Base',
                AdminTech: true,
                Staff: true
            }
        );
        Set(
            NDrop,
            false
        );
        Set(
            MGallery,
            false
        );
        Set(
            HambIconChange,
            false
        );
        Set(
            CloseAlertRibbon,
            false
        );
        If(
            userData.role = "admin" || userData.role = "tech",
            Set(
                gblNavItems,
                Table(
                    {
                        MenuText: "Home",
                        MenuIcon: Icon.Home,
                        ScreenToGoTo: Home
                    },
                    {
                        MenuText: "Create Ticket",
                        MenuIcon: Icon.AddDocument,
                        ScreenToGoTo: 'Category Select'
                    },
                    {
                        MenuText: "My Tickets",
                        MenuIcon: Icon.Folder,
                        ScreenToGoTo: MyTickets
                    },
                    {
                        MenuText: "Manager",
                        MenuIcon: Icon.Settings,
                        ScreenToGoTo: 'Admin Manager'
                    },
                    {
                        MenuText: "Knowledge",
                        MenuIcon: Icon.QuestionMark,
                        ScreenToGoTo: 'Knowledge Base'
                    }
                )
            );
            
        );
        If(
            userData.role = "staff",
            Set(
                gblNavItems,
                Table(
                    {
                        MenuText: "Home",
                        MenuIcon: Icon.Home,
                        ScreenToGoTo: Home
                    },
                    {
                        MenuText: "Create Ticket",
                        MenuIcon: Icon.AddDocument,
                        ScreenToGoTo: 'Category Select'
                    },
                    {
                        MenuText: "My Tickets",
                        MenuIcon: Icon.Folder,
                        ScreenToGoTo: MyTickets
                    },
                    {
                        MenuText: "Knowledge",
                        MenuIcon: Icon.QuestionMark,
                        ScreenToGoTo: 'Knowledge Base'
                    }
                )
            );
            
        );
        Set(
            ColorScheme,
            {
                primary: RGBA(
                    53,
                    89,
                    137,
                    1
                ),
                secondary: RGBA(
                    126,
                    149,
                    180,
                    1
                ),
                backgroundDark: RGBA(
                    124,
                    134,
                    137,
                    1
                ),
                offColor: RGBA(
                    219,
                    199,
                    175,
                    1
                ),
                orange: RGBA(
                    246,
                    149,
                    43,
                    1
                ),
                screenBackground: RGBA(
                    227,
                    234,
                    243,
                    1
                ),
                secondaryPressedColor: RGBA(
                    126,
                    149,
                    180,
                    .35
                )
            }
        );
        Set(
            MainCategory,
            Filter(
                Category_1,
                parentId = Blank()
            )
        );
        //only main categories. those that dont rely on a parent
        // Passed to filter component to check if filter is visible
        Set(
            varFilterVisible,
            false
        );
        ClearCollect(
            colTags,
            {Value: "None"}
        );
        Collect(
            colTags,
            ForAll(
                Sort(
                    Tags_1,
                    name,
                    SortOrder.Ascending
                ),
                {Value: ThisRecord.name}
            )
        );
        // Passed variable to check if search bar should be visible
        Set(
            varSearchVisible,
            false
        );
        // Variables used for searching and filtering in the 'SearchFilterTicketsSPList' power automate flows
        Set(
            TicketsChoice,
            If(
                userData.role = "admin" || userData.role = "tech",
                "My Assigned",
                "My Tickets"
            )
        );
        Set(
            StatusChoice,
            "open"
        );
        Set(
            TagChoice,
            "None"
        );
        Set(
            SearchQuery,
            ""
        );
        // Set date to start pulling tickets for My Tickets from
        // Sets the number of days, months, or years to subtract from today's date
        Set(
            varSubtractDate,
            6
        );
        // Sets the time units subtracting by
        Set(
            varTimeUnits,
            TimeUnit.Months
        );
        // Variables used for searching and filtering in the 'RecentTicketsSPList' power automate flows
        Set(
            AssignmentChoice,
            true
        );
        Set(
            SearchAllTicketsQuery,
            ""
        );
        ClearCollect(
            dummyArticles,
            {
                ArticleFileName: "1021203.txt",
                ArticleTags: "Hardware, Mobile"
            },
            {
                ArticleFileName: "EDefender_Intro.docx",
                ArticleTags: "EDefender"
            },
            {
                ArticleFileName: "RemoteLogin.PDF",
                ArticleTags: "Software, Login, Remote"
            }
        );
        Set(
            titleText,
            {
                desktopSize: 20,
                mobileSize: 13,
                boldness: FontWeight.Normal
            }
        );
        //Put variables and other code to initialize here
        Set(
            buttonText,
            ""
        );
        UpdateContext({buttonText: ""});
        Set(
            InvalidUser,
            false
        );
        UpdateContext({contextLoadingStatus: "Validating User..."});
        Switch(
            userData.role,
            "tech",
            ClearCollect(
                userNav,
                Filter(
                    navCol,
                    AdminTech = true
                )
            ),
            "admin",
            ClearCollect(
                userNav,
                Filter(
                    navCol,
                    AdminTech = true
                )
            ),
            "staff",
            ClearCollect(
                userNav,
                Filter(
                    navCol,
                    Staff = true
                )
            ),
            Set(
                InvalidUser,
                true
            )
        );
        If(
            IsEmpty(
                Filter(
                    Users_1,
                    email = User().Email
                )
            ),
            Set(
                InvalidUser,
                true
            )
        );
        
        ClearCollect(
            AllTickets,
            ForAll(
                Tickets,
                {
                    ID: ID,
                    Title: title,
                    Description: description,
                    MainCategory: mainCategory,
                    Category: category,
                    SubCategory: subCategory,
                    DateCreated: dateCreated,
                    DateClosed: dateClosed,
                    CreatorId: creatorId,
                    Status: status,
                    AssignedTo: assignedTo,
                    LastUpdated: lastUpdated,
                    UpdatedBy: updatedBy,
                    LocationId: locationId,
                    Tags: tags,
                    AddAssignees: addAssignees
                }
            )
        );
        
        //Can use a button to navigate to another screen if needed
        //enable if initialization takes place on this screen, and timer is disabled
        Select(SplashNavigate);
        //Set(userID, LookUp(userInfo, email = User().Email, id));
        UpdateContext(
            {
                NDrop: false,
                MGallery: false,
                HambIconChange: false,
                CloseAlertRibbon: false
            }
        );

    TransitionTimer As timer:
        Duration: =5000
        OnTimerEnd: |
            =//If(IsEmpty(Filter(Users_1, email = User().Email)), Navigate('User Not Valid', ScreenTransition.Fade),Navigate(Home, ScreenTransition.Fade))
            //Navigate(Home,ScreenTransition.Fade)
        Visible: =false
        X: =40
        Y: =40
        ZIndex: =5

    SplashMainContainer As groupContainer.horizontalAutoLayoutContainer:
        Height: =Parent.Height
        LayoutAlignItems: =LayoutAlignItems.Center
        LayoutDirection: =LayoutDirection.Vertical
        LayoutJustifyContent: =LayoutJustifyContent.Center
        LayoutMode: =LayoutMode.Auto
        LayoutOverflowX: =LayoutOverflow.Scroll
        LayoutOverflowY: =LayoutOverflow.Scroll
        Width: =Parent.Width
        ZIndex: =6

        LogoContainer As groupContainer.verticalAutoLayoutContainer:
            AlignInContainer: =AlignInContainer.SetByContainer
            Height: =Parent.Height
            LayoutAlignItems: =LayoutAlignItems.Center
            LayoutDirection: =LayoutDirection.Vertical
            LayoutJustifyContent: =LayoutJustifyContent.Center
            LayoutMinHeight: =300
            LayoutMinWidth: =250
            LayoutMode: =LayoutMode.Auto
            Width: =Parent.Width
            ZIndex: =1

            Logo As image:
                Height: =530
                Image: =unnamed
                Width: =498
                X: =20
                Y: =10
                ZIndex: =2

            SplashScreenLoadingContainer As groupContainer.verticalAutoLayoutContainer:
                AlignInContainer: =AlignInContainer.SetByContainer
                LayoutAlignItems: =LayoutAlignItems.Center
                LayoutDirection: =LayoutDirection.Vertical
                LayoutJustifyContent: =LayoutJustifyContent.Center
                LayoutMinHeight: =100
                LayoutMinWidth: =250
                LayoutMode: =LayoutMode.Auto
                ZIndex: =3

                SplashImage2 As image:
                    Image: =LoadGif
                    PaddingBottom: =15
                    ZIndex: =1

                SplashScreenLabel As label:
                    Align: =Align.Center
                    AutoHeight: =true
                    FontWeight: =FontWeight.Semibold
                    Italic: =true
                    PaddingTop: =10
                    Size: =20
                    Text: =contextLoadingStatus
                    ZIndex: =2

        SplashNavigate As button:
            OnSelect: |-
                =//If(InvalidUser,Navigate('User Not Valid',ScreenTransition.Fade),Navigate(Home,ScreenTransition.Fade));
                Set(
                    varTickID,
                    Value(Param("TickID"))
                );
                If(
                    InvalidUser,
                    Navigate(
                        'User Not Valid',
                        ScreenTransition.Fade
                    ),
                    If(
                        varTickID <> 0,
                        Set(
                            ticketRec,
                            LookUp(
                                AllTickets,
                                ID = varTickID
                            )
                        );
                        Navigate('Single Ticket Info', ScreenTransition.Fade, {ticketInfo: ticketRec}),
                        Navigate(
                            Home,
                            ScreenTransition.Fade
                        )
                    );
                    
                );
            Text: ="Button"
            Visible: =false
            ZIndex: =4

    SplashScreenSizeLabel As label:
        Align: =Align.Center
        FontWeight: =FontWeight.Bold
        Size: =30
        Text: ='Splash Screen'.Size
        Visible: =false
        ZIndex: =7

    "'SplashScreen Width Heigh Label' As label":
        Align: =Align.Center
        FontWeight: =FontWeight.Semibold
        Height: =313
        Size: =25
        Text: |-
            =Concatenate("Width x Height: ", Text('Splash Screen'.Width)," x ", Text('Splash Screen'.Height))
        Visible: =false
        Width: =200
        Y: =40
        ZIndex: =8

